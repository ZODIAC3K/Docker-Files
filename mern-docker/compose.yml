# specify the version of docker-compose
version: "3.8"

# define the services/containers to be run
services:
  # define the frontend service called "web"
  # we can use any name for the service. A standard naming convention is to use "web" for the frontend
  web:
    # It the name of the container [we can use any name] but for front end we are using web as container name (general convention) so when we container web-x, where x represents the number of containers created using the same image.
    # when we define something inside of depends_on, that current service depends upon the service mentioned in depends_on. So, the service mentioned in depends_on will be started before the current service. In this case, the web service depends on the api service so the api service will be started before the web service.
    depends_on: 
      - api
    
    # specify the build context for the web service (frontend) basically where Dockerfile is located for the frontend.
    build: ./frontend

    # specify the ports to expose for the web service (frontend)
    # the first number is the port on the host machine
    # the second number is the port inside the container
    ports:
      - 5173:5173

    # specify the environment variables for the web service (frontend) and the value of the environment variable is the URL of the api service (backend) which is running on port 8000 inside the container called "api".
    # these environment variables will be available inside the container "web" so can be accessed by the frontend code anywhere in the environment.
    environment: 
      VITE_API_URL: http://localhost:8000

    # this is for docker compose watch mode
    # anything mentioned under develop will be watched for changes by docker compose watch and it will perform the action mentioned
    develop:
      # we specify the files to watch for changes
      watch:
        # it'll watch for changes in package.json and package-lock.json and rebuild the container if there are any changes in these files because these files are used to install the dependencies for the frontend project and if there are any changes in these files, the dependencies need to be reinstalled  so the container needs to be rebuilt but we don't need to rebuild the image because the image is already built and we're just rebuilding the container.
        - path: ./frontend/package.json
          action: rebuild
        - path: ./frontend/package-lock.json
          action: rebuild
        # It will watch for changes in the frontend directory and sync the changes with the container in real time and since we're not changing package.json or package-lock.json, we don't need to rebuild the container but just sync the changes(updated files) with the container to see the changes in the container in real time.
        - path: ./frontend
          target: /app
          action: sync
  # define the backend service called "api"
  # we can use any name for the service. A standard naming convention is to use "web" for the frontend
  api:
    # specify the service the api service depends on (db service) so the db service will be started before the api service is started
    depends_on: 
      - db

    # specify the build context for the api service
    build: ./backend
    
    # specify the ports to expose for the api service
    # the first number is the port on the host machine
    # the second number is the port inside the container
    ports: 
      - 8000:8000

    # specify environment variables for the api service
    # here we're specifying the environment variable DB_URL which is the URL of the mongodb database running inside the db service called "db" and the URL is mongodb://db/anime where "db" is the name of the service and "anime" is the name of the database inside the mongodb database. if we're using mongodb atlas, we can specify the URL of the mongodb atlas database here. 
    # Note --
    # here "anime" is the name of the database inside the mongodb database. If database "anime" doesn't exist, it'll be created automatically when the api service is started. here database name "anime" and volume name "anime" are the same but they can be different and it is recommended to keep them the same for simplicity.
    environment: 
      DB_URL: mongodb://db/anime
    
    # establish docker compose watch mode for the api service
    develop:
      # specify the files to watch for changes
      watch:
        # it'll watch for changes in package.json and package-lock.json and rebuild the container and image if there are any changes
        - path: ./backend/package.json
          action: rebuild
        - path: ./backend/package-lock.json
          action: rebuild
        
        # it'll watch for changes in the backend directory and sync the changes with the container real time
        - path: ./backend
          target: /app
          action: sync

  # define the db service
  db:
    # specify the image to use for the db service from docker hub. If we have a custom image, we can specify that in this format
    # In the above two services, we're using the build context to build the image for the service from the Dockerfile so we specify the image as "build: ./frontend" or "build: ./backend".
    # but for the db service, we're using the image from docker hub so we specify the image as "image: mongo:latest"
    # you can find the image name and tag for mongodb from docker hub here: https://hub.docker.com/_/mongo
    image: mongo:latest

    # specify the ports to expose for the db service
    # generally, we do this in api service using mongodb atlas. But for demo purposes, we're using a local mongodb instance
    # usually, mongodb runs on port 27017. So we're exposing the port 27017 on the host machine and mapping it to the port 27017 inside the container
    ports:
      - 27017:27017

    # specify the volumes to mount for the db service
    # we're mounting the volume named "anime" inside the container at /data/db directory
    # this is done so that the data inside the mongodb container is persisted even if the container is stopped
    volumes:
      - anime-db-data:/data/db

# define the volumes to be used by the services
volumes:
  anime-db-data:
